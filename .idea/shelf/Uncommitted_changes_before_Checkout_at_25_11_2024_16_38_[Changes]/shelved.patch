Index: buildings.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import time\r\n\r\nclass Building:\r\n    def __init__(self, name, cost, time_building, health, surface, population=0, spawn='Unity', dropPoint=False):\r\n        self.name = name\r\n        self.cost = cost\r\n        self.time_building = time_building\r\n        self.health = health\r\n        self.surface = surface\r\n        self.is_built = False\r\n        self.spawn = spawn\r\n        self.dropPoint = dropPoint\r\n        self.population = population\r\n\r\n    def can_afford(self, player_resources):\r\n        for resource, amount_needed in self.cost.items():\r\n            if player_resources.get(resource, 0) < amount_needed:\r\n                return False\r\n        return True\r\n\r\n    def deduct_resources(self, player_resources):\r\n        for resource, amount_needed in self.cost.items():\r\n            player_resources[resource] -= amount_needed\r\n        print(f\"Ressources déduites pour {self.name}: {self.cost}\")    \r\n\r\n    def build(self, player_resources):\r\n        if not self.can_afford(player_resources):\r\n            print(f\"Pas assez de ressources pour construire {self.name}.\")\r\n            return False\r\n\r\n        self.deduct_resources(player_resources)\r\n        print(f\"Construction de {self.name} commencée...\")\r\n        for second in range(self.time_building):\r\n            print(f\"Construction en cours : {second + 1}/{self.time_building} secondes\")\r\n            time.sleep(1)\r\n\r\n        self.is_built = True\r\n        print(f\"Construction de {self.name} terminée.\")\r\n        return True\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/buildings.py b/buildings.py
--- a/buildings.py	(revision b801755bb7f5e1d56d1252afa1c53d11d255dc3e)
+++ b/buildings.py	(date 1732548904854)
@@ -11,6 +11,10 @@
         self.spawn = spawn
         self.dropPoint = dropPoint
         self.population = population
+        #things I took from Khalid
+        self.grid_x = None  # To be set when placed in the world
+        self.grid_y = None
+        self.tiles_occupied = []
 
     def can_afford(self, player_resources):
         for resource, amount_needed in self.cost.items():
